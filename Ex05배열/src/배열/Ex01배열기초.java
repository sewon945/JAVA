package 배열;

public class Ex01배열기초 {

	public static void main(String[] args) {

		// 배열(Array) : 같은 타입의 여러 변수를 하나의 묶음으로 다루는 자료구조
		//              인덱스와 인덱스에 대응하는 데이터들로 이루어진 자료구조
		//    인덱스란?   배열의 시작 위치에서부터 데이터가 있는 상대적인 위치(0부터 시작)
		//              같은 종류의 데이터들이 순차적으로 저장되는 공간 - 반복문을 이용하여 처리하기에 적합한 자료구조
		// int[]numbers = new int[3];
		// int- 배열타입, []- 배열선언, numbers- 배열이름, new- 배열생성/키워드, int- 선언한 배열타입과 동일, [숫자]- 배열의 크기;
		
		
		
		// 배열(Array) 자료구조
		// : 같은 타입의 여러 변수를 하나의 묶음으로 다루는 자료구조
		
		
		// 배열의 특징 (-> for문을 짝꿍처럼 자주 쓴다)
		// 1. 같은 자료형(타입)만 하나로 묶을 수 있다.
		// 2. index(인덱스) 번호를 가지고 있다.
		//    인덱스 번호는 0부터 차례로 1씩 증가한다.
		// 3. 크기가 고정적이다.
		
		
		// 배열 선언한는 방법
		// 자료형[] 변수명 = new 자료형[0(숫자)];
		
		int[] numbers = new int[5];
		System.out.println("주소값 : " + numbers); 
		// Console 창 --> [I@6504e3b2 이렇게 나옴  => "주소값" 이라는 것이 나온다
		// new int[5] 는 0부터 4까지의 방이 있다는 뜻 -> 0, 1, 2, 3, 4
		
		// numbers --> 5칸짜리 배열이 어디 있는지 주소값을 참조하는 레퍼런스 변수
	    // new --> 레퍼런스 변수를 생성하는 키워드
		
		// 주소값이라는 개념이 왜 등장했나요?
		// : 자바에는 데이터를 저장할 수 있는 공간이 분리되어 있다.
		// ---> 서로 다른 저장공간에 있는 데이터를 불러오기 위해서는
		//      해당하는 데이터가 어디에 저장되어있는지 주소값이 필요하다!
		
		// 1) 스택(Stack) 영역
		// : 비교적 작은 양의 데이터를 저장하는 공간
		// 2) 힙(Heap) 영역
		// : 커다랗고, 복잡한 데이터를 저장하는 공간
		// --> Garbage Collector(GC)라는 기능이 있어서 주기적으로 필요없는 데이터들을 정리해준다!
		
		// 배열 안에 데이터를 저장하는 방법
		// ---> 정확하게 방번호(인덱스번호)를 지정한 후 저장
		
		// 배열의 2번째 칸에 15라는 값을 집어넣겠다.
		numbers[1] = 15;     // --> 2번째 칸이기에 0부터 시작해서 0, 1 => 무슨 말일까..???
				System.out.println(numbers[1]);
		
		// index 번호를 초과하면 에러 발생 
        //		numbers[5] = 20;   (index 번호는 0~4까지 있는데 5번 방을 찾아서 에러 발생..?)
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
